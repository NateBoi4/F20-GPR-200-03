// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

struct sSphere
{
    vec4 center;
    float radius;
};
/*
bool initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    if(radius > 0)
	{
		sphere.radius = radius;
		return true;
	}
	sphere.radius = 1.0;
	return false;
}
*/
void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

float lenSq(vec2 x)
{
    return dot(x, x);
}

struct sPointLight
{
    vec4 center;
    vec3 color;
    float intensity;
};
    
void initPointLight(out sPointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

//Diffuse Intensity
// ID = K * IL
// ID is the diffuse Intensity
// K is the diffuse coefficient
// IL is the attenuated light intensity
void diffuseIntensity(out float ID, in float k, in float IL)
{
    ID = k * IL;
}

//Diffuse Coefficient
// K = max(0, dot(N, L))
// N is the unit surface normal
// L is the light vector normalize(lightPosition - surfacePosition)
void diffuseCoefficient(out float k, in vec3 N, in vec3 L)
{
    k = max(0.0, dot(N, L));
}

//Attenuation
// I = 1/(1 + d/Il + d^2 / Il^2)
// I is the attenuated light intensity
// d is the distance between light center and the surface point
// Il is the original intenisty of the light
void attenuation(out float I, in float d, in sPointLight lightIntensity)
{
    I = 1.0 / ((1.0 + d / lightIntensity.intensity) * (1.0 + d / lightIntensity.intensity));
}

//Final Color
// C = ID * CD * CL
// C is the final color
// ID is the diffuse intensity - Given as K * I
// CD is the diffuse reflection color of the surface (Solid color or surface normal)
// CL is the light color (use PointLight structure color)
void lambertianColor(out vec3 C, in float ID, in vec3 CD, in sPointLight lightColor)
{
    C = ID * CD * lightColor.color;
}

//Phong Reflectance
// IS = KS^α
// IS is the specular intensity
// KS is the specular coefficient
// α is the highlight exponent
void specularIntensity(out float IS, in float KS, in float alpha)
{
    IS = pow(KS, alpha);
}

//Specular coefficient
// KS = max(0, dot(V, R))
// V is the view vector, the unit vector from the surface towards the viewer
// V = normalize(ViewerPosition - SurfacePosition)
// R is is the reflected light vector about the normal
// R = reflect(-Light Vector, Normal)
void specularCoefficient(out float KS, in vec3 V, in vec3 R)
{
    KS = max(0.0, dot(V, R));
}

//Highlight Exponent
// α is the highlight exponent, some positive power (powers of two)
void highlightExponent(out float alpha)
{
    alpha *= alpha;
    alpha *= alpha;
}

//Final Color
// C = IA * CA + (ID * CD + IS * CS) * CL
// C is the final color
// IA is the global ambient intensity, some scaling factor for ambient light
// CA is the global ambient color, some global solid color influencing the entire scene
// ID is the light's diffuse intensity (Lambertian reflectance)
// CD is the diffuse reflection color of the surface (e.g. solid color of the surface)
// IS is the light's specular intensity (Phong or Blinn-Phong reflectance)
// CS is the specular reflection color of the surface (can be different from the surface color)
// CL is the light's color
void phongColor(out vec3 C, in float IA, in vec3 CA, 
               in float ID, in vec3 CD, 
               in float IS, in vec3 CS, in sPointLight lightColor)
{
    C = IA * CA + (ID * CD + IS * CS) * lightColor.color;
}

void blinnSpecularCoefficient(out float KS, in vec3 N, in vec3 H)
{
    KS = dot(N, H);
}

void higherExponent(out float alpha)
{
    alpha *= 4.0;
}

//Blinn-Phong reflectance
// IS = KS^α
// Halfway vector: KS = N * H
// N is the normal
// H = normalize(LightVector + ViewVector)
// α is increased: α = 4*α
// Final color: Blinn-Phong uses the same formula as Phong using the modified specular coefficient
void blinnSpecularIntensity(out float IS, in float KS, in float alpha)
{
    IS = pow(KS, alpha);
}

void blinnPhongColor(out vec3 C, in float IA, in vec3 CA, 
               in float ID, in vec3 CD, 
               in float IS, in vec3 CS, in sPointLight lightColor)
{
    C = IA * CA + (ID * CD + IS * CS) * lightColor.color;
}

//Multiple Lights
// C = IA * CA + sum[n-1, i=0](IDi * CD + ISi * CS) * CLi
//C is the final color
//IA is the global ambient intensity (not light-dependent)
//CA is the global ambient color (not light-dependent)
//i is the index of the current light
//n is the light count
//ID is the current light's diffuse intensity (Lambertian reflectance)
//CD is the diffuse reflection color of the surface (not light-dependent)
//IS is the current light's specular intensity (Phong or Blinn-Phong reflectance)
//CS is the specular reflection color of the surface (not light-dependent)
//CL is the current light's color
void multipleLights(out vec3 C, in float IA, in vec3 CA, in float i, 
                    in float n, in float ID, in vec3 CD, 
                    in float IS, in vec3 CS, in vec3 CL)
{
    for(i; i < n - 1.0; i++)
    {
        C = IA * CA + ((ID * i) * CD + (IS * i) * CS) * (CL * i);
    }
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
    
    // SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    sPointLight pointLight;
    initPointLight(pointLight, vec3(3.0, 3.0, 0.0), vec3(1.0, 0.5, 0.0), 100.0);
    
    float diffCo;
    float atten;
    float diffInt;
    vec3 lambert;
    
    float specCo;
    float highEx = 2.0;
    float specInt;
    vec3 phong;
    
    float bSpecCo;
    float bSpecInt;
    vec3 blinnPhong;
    
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), 
        rSq = sphere.radius * sphere.radius;
    
    if(lSq <= rSq)
    {
		//return vec4(0.0, 1.0, 1.0, 1.0);
        
        //actually z squared
        dp.z = rSq - lSq;
        
        vec3 position = sphere.center.xyz 
            + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = 
            //normalize(position - sphere.center.xyz);
        	(position - sphere.center.xyz) / sphere.radius;
        
        vec3 lightVector = normalize(vec3(pointLight.center) - position);
        
        float dist = distance(vec3(pointLight.center), position);
        
        vec3 viewVector = normalize(vec3(rayOrigin) - position);
        
        vec3 reflectedLightVec = reflect(-(lightVector), normal);
        
        vec3 halfwayVector = normalize(lightVector + viewVector);
        
        
        diffuseCoefficient(diffCo, normal, lightVector);
        
        attenuation(atten, dist, pointLight);
        
        diffuseIntensity(diffInt, diffCo, atten);
        
        lambertianColor(lambert, diffInt, vec3(1.0, 1.0, 1.0), pointLight);
		
        
        specularCoefficient(specCo, viewVector, reflectedLightVec);
        
        highlightExponent(highEx);
        
        specularIntensity(specInt, specCo, highEx);
        
        phongColor(phong, 0.2, vec3(0.0, 0.7, 1.0), 
               diffInt, vec3(0.5, 0.5, 0.5), 
               specInt, vec3(1.0, 1.0, 1.0), pointLight);
        
        
        blinnSpecularCoefficient(bSpecCo, normal, halfwayVector);
        
        higherExponent(highEx);
        
        blinnSpecularIntensity(bSpecInt, bSpecCo, highEx);
        
        blinnPhongColor(blinnPhong, 0.2, vec3(0.0, 0.7, 1.0), 
               diffInt, vec3(0.5, 0.5, 0.5), 
               bSpecInt, vec3(1.0, 1.0, 1.0), pointLight);
        
        
        return vec4(blinnPhong, 1.0);
    }
    
	
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}