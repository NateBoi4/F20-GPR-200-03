// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Modified by Nathan Boisvert

//Methods for Optimizations were researched on:
//https://www.khronos.org/opengl/wiki/GLSL_Optimizations
//http://cdn.imgtec.com/sdk-documentation/PowerVR+Low+level+GLSL+Optimization.pdf

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

//sSphere: Define a sphere and what it entails
//	center: Center of sphere as a point on the screen
//	radius: Radius of the sphere
struct sSphere
{
    vec4 center;
    float radius;
};

//initSphere: Set the values of a sphere object created
//Takes in a sphere object as a structure and sets its center and radius
//according to the values passed into the function
void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

//Returns the length^2 of a vector
float lenSq(vec2 x)
{
    return dot(x, x);
}

float lenSq(vec3 x)
{
    return dot(x, x);
}


//sPointLight: Define a point light and what it entails
//	center: Center of the point light on the screen
//	color: Color of the point light
//	intensity: Represents the strength of the light, how far it can reach.
struct sPointLight
{
    vec4 center;
    vec3 color;
    float intensity;
};

//initPointLight: Set the values of a point light object created
//Takes in a point light object as a structure and sets its center, color, and intensity
//according to the values passed into the function
void initPointLight(out sPointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

//Diffuse Intensity
//Calculate the intensity of a point light as a relation of the surface
//being drawn to.
// ID = K * IL
// ID is the diffuse Intensity
// K is the diffuse coefficient
// IL is the attenuated light intensity
void diffuseIntensity(out float ID, in float k, in float IL)
{
    ID = k * IL;
}

//Diffuse Coefficient
//Returns a value between 0.0 and 1.0
//This value is highest when the light is perpendicular to the surface
//This equation is a simplification of the Lambertian cosine law.
// K = max(0, dot(N, L))
// N is the unit surface normal
// L is the light vector normalize(lightPosition - surfacePosition)
void diffuseCoefficient(out float k, in vec3 N, in vec3 L)
{
    k = max(0.0, dot(N, L));
}

//Attenuation
//Replicates how light's intensity decreases as it travels
//further from its origin.
//returns the light's intensity at each point on the surface
// I = 1/(1 + d/Il + d^2 / Il^2)
// I is the attenuated light intensity
// d is the distance between light center and the surface point
// lightIntensity is the original intenisty of the light
void attenuation(out float I, in float d, in sPointLight lightIntensity)
{
    float intensityInv = 1.0 / lightIntensity.intensity;
    I = 1.0 / ((1.0 + d * intensityInv) * (1.0 + d * intensityInv));
}

//Lambertian Reflectance
//Uses diffuse shading to bounce rays randomly off of surfaces
//which results in the final color.
// C = ID * CD * CL
// C is the final color
// ID is the diffuse intensity - Given as K * I
// CD is the diffuse reflection color of the surface (Solid color or surface normal)
// lightColor is the light color (use PointLight structure color)
void lambertianColor(out vec3 C, in float ID, in vec3 CD, in sPointLight lightColor)
{
    C = ID * CD * lightColor.color;
}

//Specular Intensity
//Calculate the point light intensity in relation to the viewer
// IS = KS^α
// IS is the specular intensity
// KS is the specular coefficient
// alpha is the highlight exponent
void specularIntensity(out float IS, in float KS, in float alpha)
{
    IS = pow(KS, alpha);
}

//Specular coefficient
//Represents the alignment of the viewer's line of sight to the surface
//while light is being reflected off the object surface.
// KS = max(0, dot(V, R))
// V is the view vector, the unit vector from the surface towards the viewer
// V = normalize(ViewerPosition - SurfacePosition)
// R is is the reflected light vector about the normal
// R = reflect(-Light Vector, Normal)
void specularCoefficient(out float KS, in vec3 V, in vec3 R)
{
    KS = max(0.0, dot(V, R));
}

//Highlight Exponent
//Focuses the highlight to a point by raising the coefficient to a positive power
//which reduces its effects.
// alpha is the highlight exponent, some positive power (powers of two)
void highlightExponent(out float alpha)
{
    alpha *= alpha;
    alpha *= alpha;
}

//Phong Reflectance
//Improves on the Lambertian model by adding specular highlights
//Adds a small highlight based on the visibility of the light on the surface
// C = IA * CA + (ID * CD + IS * CS) * CL
// C is the final color
// IA is the global ambient intensity, some scaling factor for ambient light
// CA is the global ambient color, some global solid color influencing the entire scene
// ID is the light's diffuse intensity (Lambertian reflectance)
// CD is the diffuse reflection color of the surface (e.g. solid color of the surface)
// IS is the light's specular intensity (Phong or Blinn-Phong reflectance)
// CS is the specular reflection color of the surface (can be different from the surface color)
// lightColor is the light's color
void phongColor(out vec3 C, in float IA, in vec3 CA, 
               in float ID, in vec3 CD, 
               in float IS, in vec3 CS, in sPointLight lightColor)
{
    C = IA * CA + (ID * CD + IS * CS) * lightColor.color;
}

//Blinn Phong Specular Coefficient
//KS is the specular coefficient given as KS = dot(N, H)
//N is the unit normal of the surface
//H is the halfway vector which is the average of the light and view vectors
//H = normalize(N, L)
void blinnSpecularCoefficient(out float KS, in vec3 N, in vec3 H)
{
    KS = dot(N, H);
}

//Increases the highlight exponent for Blinn-Phong reflectance
void higherExponent(out float alpha)
{
    alpha *= 4.0;
}

//Blinn-Phong Specular Intensity
// IS = KS^α
// KS is the specular coefficient
// α is increased: α = 4*α
// Final color: Blinn-Phong uses the same formula as Phong using the modified specular coefficient
void blinnSpecularIntensity(out float IS, in float KS, in float alpha)
{
    IS = pow(KS, alpha);
}

//Blinn-Phong Reflectance
//Improves on the Phong Reflectance by making the highlight sharper
//and giving it a more oval shape.
// C = IA * CA + (ID * CD + IS * CS) * CL
// C is the final color
// IA is the global ambient intensity, some scaling factor for ambient light
// CA is the global ambient color, some global solid color influencing the entire scene
// ID is the light's diffuse intensity (Lambertian reflectance)
// CD is the diffuse reflection color of the surface (e.g. solid color of the surface)
// IS is the light's specular intensity (Phong or Blinn-Phong reflectance)
// CS is the specular reflection color of the surface (can be different from the surface color)
// lightColor is the light's color
void blinnPhongColor(out vec3 C, in float IA, in vec3 CA, 
               in float ID, in vec3 CD, 
               in float IS, in vec3 CS, in sPointLight lightColor)
{
    C = IA * CA + (ID * CD + IS * CS) * lightColor.color;
}

//Multiple Lights
//The total light influencing the color at any point on the surface, 
//is the sum of all of the lights' influences.
// C = IA * CA + sum[n-1, i=0](IDi * CD + ISi * CS) * CLi
//C is the final color
//IA is the global ambient intensity (not light-dependent)
//CA is the global ambient color (not light-dependent)
//i is the index of the current light
//n is the light count
//ID is the current light's diffuse intensity (Lambertian reflectance)
//CD is the diffuse reflection color of the surface (not light-dependent)
//IS is the current light's specular intensity (Phong or Blinn-Phong reflectance)
//CS is the specular reflection color of the surface (not light-dependent)
//lightColor is the current light's color
void multipleLights(out vec3 C, in float IA, in vec3 CA, in float i, 
                    in float n, in float ID, in vec3 CD, 
                    in float IS, in vec3 CS, in sPointLight lightColor)
{
    for(i; i < n - 1.0; ++i)
    {
        C = IA * CA + ((ID * i) * CD + (IS * i) * CS) * (lightColor.color * i);
    }
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
    
    // SCENE
    //Declare a sphere and define its components
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    
    //Declare a point light and define its components
    sPointLight pointLight;
    initPointLight(pointLight, vec3(3.0, 3.0, 0.0), vec3(1.0, 0.5, 0.0), 100.0);
    
    //Declare a point light and define its components
    sPointLight pointLightTwo;
    initPointLight(pointLightTwo, vec3(-3.0, -3.0, 0.0), vec3(1.0, 0.0, 0.5), 100.0);
    
    //Variable Declarations and definitions
    float alpha = 1.0;
    float ambientIntensity = 0.2;
    vec3 ambientColor = vec3(0.0, 0.7, 1.0);
    
    float diffCo;
    float atten;
    float diffInt;
    vec3 lambert;
    
    float specCo;
    float highEx = 2.0;
    float specInt;
    vec3 phong;
    
    float bSpecCo;
    float bSpecInt;
    vec3 blinnPhong;
    
    vec3 lights;
    
    /*
	Gets the distance from the circle center to the current pixel being evaluated
	and if that distance is inside the circle radius then a ray is bounced off
	the surface normal. Involves calculations for: current distance, unit normal of
	the surface, the surface position of the current pixel, the light vector as the normal
	of the distance from the surfaces position to the light position, the distance between the
	light center and the surface position, the view vector as a unit vector from the surface position
	towards the viewer's position as the source of the ray, the reflection of the light vector from the
	normal, and the halfway vector as the average of the light vector and view vector.
	*/
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), 
        rSq = sphere.radius * sphere.radius;
    
    if(lSq <= rSq)
    {
		//return vec4(0.0, 1.0, 1.0, 1.0);
        
        //actually z squared
        dp.z = rSq - lSq;
        
        vec3 position = sphere.center.xyz 
            + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = 
            //normalize(position - sphere.center.xyz);
        	(position - sphere.center.xyz) / sphere.radius;
        
        vec3 lightVector = 
            //normalize(pointLight.center.xyz - position);
            (pointLight.center.xyz - position) * inversesqrt(lenSq((pointLight.center.xyz - position)));
        
        float dist = distance(pointLight.center.xyz, position);
        
        vec3 viewVector = 
            //normalize(rayOrigin.xyz - position);
            (rayOrigin.xyz - position) * inversesqrt(lenSq((rayOrigin.xyz - position)));
        
        vec3 reflectedLightVec = reflect(-(lightVector), normal);
        
        vec3 halfwayVector = 
            //normalize(lightVector + viewVector);
            (lightVector + viewVector) * inversesqrt(lenSq((lightVector + viewVector)));
        
        //Lambertian Reflectance
        diffuseCoefficient(diffCo, normal, lightVector);
        
        attenuation(atten, dist, pointLight);
        
        diffuseIntensity(diffInt, diffCo, atten);
        
        lambertianColor(lambert, diffInt, vec3(1.0, 1.0, 1.0), pointLight);
		
        //Phong Reflectance
        specularCoefficient(specCo, viewVector, reflectedLightVec);
        
        highlightExponent(highEx);
        
        specularIntensity(specInt, specCo, highEx);
        
        phongColor(phong, ambientIntensity, ambientColor, 
               diffInt, vec3(0.5, 0.5, 0.5), 
               specInt, vec3(1.0, 1.0, 1.0), pointLight);
        
        //Blinn-Phong Reflectance
        blinnSpecularCoefficient(bSpecCo, normal, halfwayVector);
        
        higherExponent(highEx);
        
        blinnSpecularIntensity(bSpecInt, bSpecCo, highEx);
        
        blinnPhongColor(blinnPhong, ambientIntensity, ambientColor, 
               diffInt, vec3(0.5, 0.5, 0.5), 
               bSpecInt, vec3(1.0, 1.0, 1.0), pointLight);
        
        //Multiple Lights
        multipleLights(lights, ambientIntensity, ambientColor, 0.0, 
                    4.0, diffInt, normal, 
                    specCo, vec3(1.0, 1.0, 1.0), pointLight);
        
        //return vec4(lambert, alpha);
        //return vec4(phong, alpha);
        return vec4(blinnPhong, alpha);
        //return vec4(lights, alpha);
    }
    
	
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}