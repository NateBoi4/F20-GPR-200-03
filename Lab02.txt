//Output the screen-space or UV coordinate as a static gradient. Done in class.
vec4 myEffect0 (in vec2 fragCoord, in vec2 resolution)
{
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    // R is horizontal
    // G is vertical
    // B
    // A
    //return vec4(fragCoord, 0.0, 1.0);
    
    //final: red-green gradient
    
    vec2 uv = fragCoord/resolution;
    return vec4(uv, 0.25, 1.0);
    
    //return vec4(0.25, uv, 1.0);
    
    //return vec4(uv.x, 0.25, uv.y, 1.0);
    
}

//Implement a static checkerboard pattern with perfectly square checkers
vec4 myEffect1 (in vec2 fragCoord)
{
    return vec4(1.0, 0.5, 0.7, 1.0);
}

//Implement a circle whose color and size change over time.
vec4 myEffect2 (in vec2 fragCoord)
{
    return vec4(0.2, 0.4, 0.6, 1.0);
}

//Implement a unique, full-screen psychedelic effect to morph colors and patterns all across the screen.  
//Use time and other uniforms to animate it.
vec4 myEffect3 (in vec2 fragCoord)
{
    return vec4(0.3, 0.9, 0.9, 1.0);
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //R, G ,B, A  => [0, 1]
    //fragColor = vec4(1.0, 1.0, 1.0, 1.0);
    
    fragColor = myEffect0(fragCoord, iResolution.xy);
    //fragColor = myEffect1(fragCoord);
    //fragColor = myEffect2(fragCoord);
    //fragColor = myEffect3(fragCoord);
    
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}