#define colorRGB	vec3

//Output the screen-space or UV coordinate as a static gradient. Done in Class
vec4 myEffect0 (in vec2 fragCoord, in vec2 resolution)
{
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    // R is horizontal
    // G is vertical
    // B
    // A
    //return vec4(fragCoord, 0.0, 1.0);
    
    //final: red-green gradient
    
    vec2 uv = fragCoord/resolution;
    return vec4(uv, 0.25, 1.0);
    
    //return vec4(0.25, uv, 1.0);
    
    //return vec4(uv.x, 0.25, uv.y, 1.0);
    
}

//Implement a static checkerboard pattern with perfectly square checkers
vec4 myEffect1 (in vec2 fragCoord, in vec2 resolution)
{
    float scale = 9.0; //Scales size of board
    float alpha = 1.0; //Alpha of image
    float evens = 2.0; //Sets mod result to 1.0 or 0.0 for black or white color
    vec2 tile_size = vec2(resolution.x / resolution.y, 1.0); //Determines size of tile, based on coordinate space
    vec2 grid = ceil(scale * fragCoord * tile_size / resolution); //Forms Grid for checkerboard
    //Grid is made according to scaling, coordinate space vs. resolution, and tile size.
    vec3 tile = colorRGB(mod(grid.x + grid.y, evens)); //Determines tile color based on coordinate space
    return vec4(tile, alpha); //Returns checkerboard image
}

//Implement a circle whose color and size change over time.
vec4 myEffect2 (in vec2 fragCoord)
{
    return vec4(0.2, 0.4, 0.6, 1.0);
}

//Implement a unique, full-screen psychedelic effect to morph colors and patterns all across the screen.  
//Use time and other uniforms to animate it.
vec4 myEffect3 (in vec2 fragCoord)
{
    return vec4(0.3, 0.9, 0.9, 1.0);
}



void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //R, G ,B, A  => [0, 1]
    //fragColor = vec4(1.0, 1.0, 1.0, 1.0);
    
    //fragColor = myEffect0(fragCoord, iResolution.xy);
    fragColor = myEffect1(fragCoord, iResolution.xy);
    //fragColor = myEffect2(fragCoord);
    //fragColor = myEffect3(fragCoord);
    
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}