// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Code modified by Nathan Boisvert 2020

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

//Cross Fade Effect
//Takes in Two Textures and time as a float
//Time is passed through a sine function to get values from -1.0 to 1.0
//Time is limited from 0.0 to 1.0 to prevent negative values
//Mix blends the two textures over a course of sTime
//Returns a vec4 as the corssfade over time
void crossFadeEffect(out vec4 blend, in vec4 sampleOne, in vec4 sampleTwo, in float t)
{
    float sTime = max(0.0, sin(t));
	blend = mix(sampleOne, sampleTwo, sTime);
}

//Distortion Effect
//Takes in a texture coordinate and time as a float
//Uses sine and cosine functions to generate wave effects
//Modifies wave effects to represent a spiral
//If image is already moving with time, spiral rotates with time
//Alternative effects can be used if time is not already being used to modify texture
void distortionEffect(out sCoord distort, in float t)
{
    distort.x = distort.y * cos(distort.x);
    distort.y = distort.x * sin(distort.y);
	//distort.x = distort.y * cos(distort.x) * t - 1000.0;
    //distort.x = distort.y * cos(distort.x) - t;
    //distort.x = distort.y * cos(distort.x) + (1.5 * t);
}

//Reference to Lambertian Reflectance: https://www.shadertoy.com/view/WdtcDN
//Nathan Boisvert 2020
//Diffuse Intensity
//Calculate the intensity of a point light as a relation of the surface
//being drawn to.
// ID = K * IL
// ID is the diffuse Intensity
// K is the diffuse coefficient
// IL is the attenuated light intensity
void diffuseIntensity(out float ID, in float k, in float IL)
{
    ID = k * IL;
}

//Diffuse Coefficient
//Returns a value between 0.0 and 1.0
//This value is highest when the light is perpendicular to the surface
//This equation is a simplification of the Lambertian cosine law.
// K = max(0, dot(N, L))
// N is the unit surface normal
// L is the light vector normalize(lightPosition - surfacePosition)
void diffuseCoefficient(out float k, in vec3 N, in vec3 L)
{
    k = max(0.0, dot(N, L));
}

//Attenuation
//Replicates how light's intensity decreases as it travels
//further from its origin.
//returns the light's intensity at each point on the surface
// I = 1/(1 + d/Il + d^2 / Il^2)
// I is the attenuated light intensity
// d is the distance between light center and the surface point
// lightIntensity is the original intenisty of the light
void attenuation(out float I, in float d, in float lightIntensity)
{
    float intensityInv = 1.0 / lightIntensity;
    I = 1.0 / ((1.0 + d * intensityInv) * (1.0 + d * intensityInv));
}

//Lambertian Reflectance
//Uses diffuse shading to bounce rays randomly off of surfaces
//which results in the final color.
// C = ID * CD * CL
// C is the final color
// ID is the diffuse intensity - Given as K * I
// CD is the diffuse reflection color of the surface (Solid color or surface normal)
// lightColor is the light color (use PointLight structure color)
void lambertianColor(out vec3 C, in float ID, in vec3 CD, in vec3 lightColor)
{
    C = ID * CD * lightColor;
}

//A simple rotation matrix
//Rotates about the Y-axis
//Takes in an angle passes this angle through sine and cosine functions
//Implements these functions into a matrix to generate a rotation effect
//Uses time as the angle to get a constant rotation
mat3 rotationMatrix(in float angle)
{
    float s = sin(angle);
    float c = cos(angle);
    
    return mat3(c, 0.0, s,
                0.0, 1.0, 0.0,
                -s, 0.0, c);
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float t)
{   
    //Texture set up to fit on screen depending on screen resolution and viewport position
    sCoord px = vp.pixelCoord;
    
    sDCoord resZero = iChannelResolution[0].xy; //Get resolution of Channel in zero position
    sDCoord resOne = iChannelResolution[1].xy; //Get resolution of Channel in one position
    
    //Creates a ratio against the screen inverse resolution to fit texture 0 on y-grid
    sScalar ratioZeroy = resZero.y * vp.resolutionInv.y;
    //Creates a ratio against the screen inverse resolution to fit texture 0 on x-grid
    sScalar ratioZerox = resZero.x * vp.resolutionInv.x;
    //Creates a ratio against the screen inverse resolution to fit texture 1 on y-grid
    sScalar ratioOney = resOne.y * vp.resolutionInv.y;
    //Creates a ratio against the screen inverse resolution to fit texture 1 on x-grid
    sScalar ratioOnex = resOne.x * vp.resolutionInv.x;
    
    sCoord locZero = px / resZero; // relative to texture (input)
    sCoord locOne = px / resOne; // relative to texture (input)
    
    locZero.y = ratioZeroy * locZero.y; //zoom texture 0 on y-axis to fit screen ratio
    locZero.x = ratioZerox * locZero.x; //zoom texture 0 on x-axis to fit screen ratio
    locOne.y = ratioOney * locOne.y; //zoom texture 1 on y-axis to fit screen ratio
    locOne.x = ratioOnex * locOne.x; //zoom texture 1 on x-axis to fit screen ratio
    
    //Cubemap rotation
    vec3 cubeloc = ray.direction.xyz; //Use calculated ray direction to get current pixel
    //cubeloc.z = cubeloc.z * min(0.0, sin(t));
    mat3 rotate = rotationMatrix(t); //Create a rotation matrix
    cubeloc = rotate * cubeloc; //Rotate cubemap by the rotation matrix
    
    //Circle to distort inside of
    //Circle creation referenced to: https://www.shadertoy.com/view/WdtcDN
    //Nathan Boisvert 2020
    float radius = 1.0; //Radius for circle 
    //vec2 center = vec2((vp.ndc.x), (vp.ndc.y)); //Circle center set by viewport
    vec2 center = vec2(0.0, 0.0); //Circle center in center of screen
    vec2 dp; //Display port
    dp = ray.direction.xy - center.xy; //Fit display port to circle center against ray direction
    float lSq = lengthSq(dp); //Get the length squared of the display port
    float rSq = radius * radius; //Get the radius squared
    if(lSq <= rSq) //Check if current pixel is inside circle bounds
    {
        //Apply distortion effect inside of circle
    	//distortionEffect(locZero, t * 0.5);
    	//distortionEffect(locOne, t * 0.5);
        distortionEffect(cubeloc.xy, t * 0.5);
    }
    
    //Set up for Lambertian Reflectance
    //Center of light on screen, moves over time (either by tangent of time, sine of time, or both)
    vec3 lightCenter = vec3(6.0, 0.0, 0.0); //* (tan(t) * 0.5);
    lightCenter.x *= sin(t);
    vec3 lightColor = vec3(1.0, 0.0, 0.0); //Color of light
    float lightIntensity = 100.0; //Intensity of light
    float diffCo;
    float atten;
    float diffInt;
    vec3 lambert;
    
    vec3 position = vp.viewportPoint.xyz; //Surface position given by viewport
    
    //Surface normal as a unit vector of position
    vec3 normal = (vec3(position.xy, 1.0)) 
        * inversesqrt(lengthSq(vec3(position.xy, 1.0)));
    
    //Light Vector as a unit vector between the surface position and the light's center point
    vec3 lightVector = (lightCenter - position) 
       	* inversesqrt(lengthSq((lightCenter - position)));
    
    //Distance from light's center point to surface position
    float dist = distance(lightCenter, position);
    
    //Lambertian Reflectance
    diffuseCoefficient(diffCo, normal, lightVector); //Get diffuse coefficient
        
    attenuation(atten, dist, lightIntensity); //Attenuate the light intensity
        
    diffuseIntensity(diffInt, diffCo, atten); //Get the diffuse intensity, set by coefficient and attenuation
    
    //Create moving texture to be used as colors and give them a cross fade effect
    //color4 colorZero = texture(iChannel0, locZero + vec2(t, 0.0) * 0.5); //Color moves with time
    //color4 colorOne = texture(iChannel1, locOne + vec2(t, 0.0) * 0.5); //Color moves with time
    color4 crossFade; //Cross Fade color
    //crossFadeEffect(crossFade, colorZero, colorOne, t); //Give Cross Fade Effect
    
    //Create texture to be used as colors
    color4 colorZero = texture(iChannel0, locZero); //Color
    color4 colorOne = texture(iChannel1, locOne); //Color
    color4 colorTwo = texture(iChannel2, cubeloc); //Color
    
    //Create Lambertian Reflectance on the texture
    lambertianColor(lambert, diffInt, colorZero.xyz, lightColor);
    
    crossFadeEffect(crossFade, colorZero, colorOne, t); //Give Cross Fade Effect
    
    //return colorZero;
    //return colorOne;
    return colorTwo;
    //return crossFade;
    //return vec4(lambert, 1.0);
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}