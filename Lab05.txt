// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// RENDERING FUNCTIONS

void crossFadeEffect(out vec4 blend, in vec4 sampleOne, in vec4 sampleTwo, in float t)
{
	blend = mix(sampleOne, sampleTwo, t);
}

void distortionEffect(out sCoord distort, in float t)
{
	distort.x = distort.y * cos(distort.x) - 1000.0;
    distort.y = distort.x * sin(distort.y);
}

sCoord wave(in sCoord originalLocation)
{
    sCoord deformedLocation;
    //do something
    return deformedLocation;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float t)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    // const color
    //return vec4(1.0, 0.5, 0.0, 1.0);
    
    // texture (full-screen)
    //sampler2D tex = iChannel0;
    //sCoord loc = vp.uv; //Relative to display (output)
    
    //Time
    //float speed = 2.0;
    float sTime = max(0.0, sin(t));
    
    //Texture
    sCoord px = vp.pixelCoord;
    
    sDCoord resZero = iChannelResolution[0].xy;
    sDCoord resOne = iChannelResolution[1].xy;
    
    sScalar ratioZeroy = resZero.y * vp.resolutionInv.y;
    sScalar ratioZerox = resZero.x * vp.resolutionInv.x;
    sScalar ratioOney = resOne.y * vp.resolutionInv.y;
    sScalar ratioOnex = resOne.x * vp.resolutionInv.x;
    
    sCoord locZero = px / resZero; // relative to texture (input)
    sCoord locOne = px / resOne; // relative to texture (input)
    
    locZero.y = ratioZeroy * locZero.y; //zoom + shift
    locZero.x = ratioZerox * locZero.x; //zoom + shift
    locOne.y = ratioOney * locOne.y; //zoom + shift
    locOne.x = ratioOnex * locOne.x; //zoom + shift
    
    float radius = 1.0; //0.5;
    //vec2 center = vec2((vp.ndc.x), (vp.ndc.y));
    vec2 center = vec2(0.0, 0.0);
    vec2 dp;
    dp.xy = ray.direction.xy - center.xy;
    float lSq = dot(dp.xy, dp.xy);
    float rSq = radius * radius;
    if(lSq <= rSq)
    {
        
    	distortionEffect(locZero, t * 0.5);
    	distortionEffect(locOne, t * 0.5);
    }
    
    color4 colorZero = texture(iChannel0, locZero + vec2(t, 0.0) * 0.5); //Color
    color4 colorOne = texture(iChannel1, locOne + vec2(t, 0.0) * 0.5); //Color
    color4 crossFade;
    
    crossFadeEffect(crossFade, colorZero, colorOne, sTime);
    
    //return crossFade;
    return colorZero;
    //return texture(iChannel0, locZero).rrrr; //grayscale
    
    //tetsing/reference for shading
    //return vp.viewportPoint;
    //return vec4(0.0, 0.0, 1.0, 1.0);
    //return vec4(
    //    normalize(vec3(vp.viewportPoint.xy, 1.0)), 
    //    1.0);
    
    //cube mapping
    // sampler type = 'samplerCube'
    //vec3 cubeloc = ray.direction.xyz;
    // rotation matrix
    //cubeloc = rot * cubeloc;
    //cubeloc.z = -1.0 * cubeloc.z;
    //return texture(iChannel2, cubeloc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}