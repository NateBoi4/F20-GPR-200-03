#version 450


#ifdef GL_ES
precision highp float;
#endif //GL_ES

layout (location = 0) out vec4 rtFragColor;
//out vec4 rtFragColor;

// VARYING
// PER-VERTEX: recieve final color
in vec4 vColor;

//PER-FRAGMENT: recieving stuff used for final color
in vec4 vNormal;

//in vec2 vTexcoord;

in vec4 vTexcoord;
in vec4 vPointLightCenter;
in vec3 vPointLightColor;
in vec3 vObjectColor;
in float vAmbientIntensity;
in vec3 vObjectPos;
in vec3 vViewPos;
in float vSpecularIntensity;

void main()
{
	//rtFragColor = vec4(0.5, 0.0, 0.25, 1.0);
	
	//PER-VERTEX: input is just final color
	//rtFragColor = vColor;
	
	//PER-FRAGMENT: calulate final color here using inputs
	//vec4 N = normalize(vNormal);
	//rtFragColor = vec4(N.xyz * 0.5 + 0.5, 1.0);
	
	//rtFragColor = vTexcoord;
	//rtFragColor = vec4(vTexcoord, 0.0, 1.0);
	
	/*
	vec3 color = vObjectColor;
    float ambientIntensity = vAmbientIntensity;
    vec3 lightColor = vPointLightColor;
    vec4 lightCenter = vPointLightCenter;
    float specularIntensity = vSpecularIntensity;
    vec3 ambient = ambientIntensity * lightColor;
    vec4 N = normalize(vNormal);
    vec3 lightDirection = normalize(lightCenter.xyz - vObjectPos);
    float diffCo = max(dot(N.xyz, lightDirection), 0.0);
    vec3 diffuse = diffCo * lightColor;
    vec3 viewDirection = normalize(vViewPos - vObjectPos);
    vec3 reflectedLightVec = reflect(-(lightDirection), N.xyz);
    float specCo = max(dot(viewDirection, reflectedLightVec), 0.0);
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    vec3 specular = specularIntensity * specCo * lightColor;
    rtFragColor = vec4((ambient + diffuse + specular) * color, 1.0);
    //*/
    
}