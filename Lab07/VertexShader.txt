#version 450

// Code by Nathan Boisvert 2020
// Credit to Daniel Buckstein for providing starter code 2020
// Credit to www.learnopengl.com for reference to phong reflectance model

//MAIN DUTY: PROCESS ATTRIBUTES
// e.g. 3D position in space
// e.g. normal
//OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition;

// e.g. 2D uv: texture coordinate
// TEXTURE-SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;

// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;
uniform vec3 viewPos;
uniform sampler2D uTexture;

// VARYING

// PER-VERTEX: send final color
out vec4 vColor;

//PER-FRAGMENT: send stuff to the FS to calculate final color
out vec4 vNormal;

//out vec2 vTexcoord;
out vec4 vTexcoord;

out vec4 vPointLightCenter;
out vec3 vPointLightColor;
out vec3 vObjectColor;
out float vAmbientIntensity;
out vec3 vObjectPos;
out vec3 vViewPos;
out float vSpecularIntensity;

struct pointLight
{
	vec4 center;
	vec3 color;
};

void initPointLight(out pointLight light, in vec3 center, in vec3 color)
{
    light.center = vec4(center, 1.0);
    light.color = color;
}

//Reference for Phong Lighting: https://learnopengl.com/Lighting/Basic-Lighting
/* 
vPhongReflectance: Calculates the phong reflectance for a point light on an object
and returns the color of the model for PER-VERTEX shader.
phong:			Final returned color.
objectColor:	Color of the surface of the object being reflected against. A texture in this project.
ambientInt:		Intensity scalar for ambient light on the model.
specularInt:	Intensity scalar for specular light on model.
viewPosition:	Camera position vector.
N:				Normal vector to the surface of the model.
objPos:			Position of model in space. Object coordinates.
light:			Point light being placed on model.
This function calculates ambient lighting, diffuse lighting, and specular lighting based on inputs
into the function and combimes them altogether along with the color (or texture) of the model being
reflected against. This is done with calculations for Phong Reflectance to get light vector,
normal vector, diffuse coefficient, view vector, reflected light vector, and specular coefficient.
*/
void vPhongReflectance(out vec4 phong, in vec3 objectColor, in float ambientInt,
					  in float specularInt, in vec3 viewPosition, in vec3 N, 
					  in vec3 objPos, in pointLight light)
{
    vec3 ambient = ambientInt * light.color;
    vec3 norm = normalize(N);
    vec3 lightDirection = normalize(light.center.xyz - objPos);
    float diffCo = max(dot(N, lightDirection), 0.0);
    vec3 diffuse = diffCo * light.color;
    vec3 viewDirection = normalize(viewPosition - objPos);
    vec3 reflectedLightVec = reflect(-(lightDirection), N);
    float specCo = max(dot(viewDirection, reflectedLightVec), 0.0);
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    vec3 specular = specularInt * specCo * light.color;
    phong = vec4((ambient + diffuse + specular) * objectColor, 1.0);
}

void main()
{
	// REQUIRED: set this value:
	// problem: gl_position is in "clip-space"
	// problem: aPosition is in "object-space"
	//gl_Position = aPosition;
	
	// position in world-space (wrong)
	//vec4 pos_world = uModelMat * aPosition;
	//gl_Position = pos_world;
	
	// position in camera-space (also wrong)
	//vec4 pos_camera = uViewMat * uModelMat * aPosition;
	//vec4 pos_camera = uViewMat * pos_world;
	//gl_Position = pos_camera;
	
	// position in clip space (finally!)
	//vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;
	//vec4 pos_clip = uViewProjMat * pos_world;
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_camera;
	gl_Position = pos_clip;
	
	// NORMAL PIPELINE
	mat3 normalMat = transpose(inverse(mat3(modelViewMat)));
	vec3 norm_camera = normalMat * aNormal;
	//vec3 norm_camera = mat3(modelViewMat) * aNormal;
	
	// TEXCOORD PIPELINE
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	// LIGHTING PIPELINE
	//Create and intialize point lights.
	pointLight lightOne;
	
	pointLight lightTwo;
	
    initPointLight(lightOne, vec3(3.0, 3.0, 0.0), vec3(1.0, 0.5, 0.0));
    initPointLight(lightTwo, vec3(-5.0, -3.0, 0.0), vec3(0.5, 1.0, 0.0));
    
    //Set up color of model. Solid color or texture.
    //vec3 color = vec3(1.0, 0.0, 0.0);
    vec3 color = texture(uTexture, aTexcoord.xy).rgb;
    
    //Set Values for ambient intensity and specular intensity
    float ambientIntensity = 0.1;
    float specularIntensity = 0.9;
    
    //Hold color for calculated lights
    vec4 colOne;
    vec4 colTwo;
	
	// OPTIONAL: set varyings
	//vColor = vec4(1.0, 0.5, 0.0, 1.0);
	
	//DEBUGGING:
	
	//PER-VERTEX: calculate and output final color
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	
	// VIEW-SPACE PHONG REFLECTION
	/*
	//Move variables to view-space as necessary
    ambientIntensity *= float(modelViewMat);
    specularIntensity *= float(modelViewMat);
    lightOne.center *= modelViewMat;
    
    //Calulate lighting
    vPhongReflectance(colOne, color, ambientIntensity,
					  specularIntensity, viewPos, norm_camera, 
					  pos_camera.xyz, lightOne);
					  
	vPhongReflectance(colTwo, color, ambientIntensity,
					  specularIntensity, viewPos, norm_camera, 
					  pos_camera.xyz, lightTwo);				  
	
	//Combine lighting for multiple lights
	vColor = colOne + colTwo;
	
    //*/
    
    //*
    // OBJECT-SPACE PHONG REFLECTION
    //Calulate lighting
    vPhongReflectance(colOne, color, ambientIntensity,
					  specularIntensity, viewPos, aNormal, 
					  aPosition.xyz, lightOne);
					  
	vPhongReflectance(colTwo, color, ambientIntensity,
					  specularIntensity, viewPos, aNormal, 
					  aPosition.xyz, lightTwo);
	
	//Combine lighting for multiple lights			  
	vColor = colOne + colTwo;
    
    //*/
	
	//PER-FRAGMENT: pass things that FS needs to calculate final color
	//vNormal = vec4(aNormal, 0.0);
	//vNormal = vec4(norm_camera, 0.0);
	
	
	//vTexcoord = aTexcoord;
	//vTexcoord = uv_atlas;
	
	
	// VIEW-SPACE PHONG REFLECTION
	/*
	//Varyings are set and modified into view-space
	vPointLightCenter = lightOne.center;
	vPointLightCenter *= modelViewMat;
	vPointLightColor = lightOne.color;
	vObjectColor = color;
	vAmbientIntensity = ambientIntensity;
	vAmbientIntensity *= float(modelViewMat);
	vObjectPos = pos_camera.xyz;
	vViewPos = viewPos;
	vSpecularIntensity = specularIntensity;
	vSpecularIntensity *= float(modelViewMat);
	vNormal = vec4(norm_camera, 0.0);
	//*/
	
	//OBJECT-SPACE PHONG REFLECTION
	/*
	//Varyings are set in object-space
	vPointLightCenter = lightOne.center;
	vPointLightColor = lightOne.color;
	vObjectColor = color;
	vAmbientIntensity = ambientIntensity;
	vObjectPos = aPosition.xyz;
	vViewPos = viewPos;
	vSpecularIntensity = specularIntensity;
	vNormal = vec4(aNormal, 0.0);
	//*/
	
	
	//gl_Position = uProjMat * modelViewMat * aTexcoord;
	
	
}