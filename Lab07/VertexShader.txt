#version 450


//MAIN DUTY: PROCESS ATTRIBUTES
// e.g. 3D position in space
// e.g. normal
//OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition;

// e.g. 2D uv: texture coordinate
// TEXTURE-SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;

// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

// VARYING

// PER-VERTEX: send final color
out vec4 vColor;

//PER-FRAGMENT: send stuff to the FS to calculate final color
out vec4 vNormal;

//out vec2 vTexcoord;
out vec4 vTexcoord;

struct pointLight
{
	vec4 center;
	vec3 color;
	float intensity;
};

void initPointLight(out pointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = vec4(center, 1.0);
    light.color = color;
    light.intensity = intensity;
}

void diffuseIntensity(out float ID, in float k, in float IL)
{
    ID = k * IL;
}

void diffuseCoefficient(out float k, in vec3 N, in vec3 L)
{
    k = max(0.0, dot(N, L));
}

void attenuation(out float I, in float d, in pointLight lightIntensity)
{
    float intensityInv = 1.0 / lightIntensity.intensity;
    I = 1.0 / ((1.0 + d * intensityInv) * (1.0 + d * intensityInv));
}

void specularIntensity(out float IS, in float KS, in float alpha)
{
    IS = pow(KS, alpha);
}

void specularCoefficient(out float KS, in vec3 V, in vec3 R)
{
    KS = max(0.0, dot(V, R));
}

void highlightExponent(out float alpha)
{
    alpha *= alpha;
    alpha *= alpha;
    alpha *= alpha;
    alpha *= alpha;
}

void phongColor(out vec3 C, in float IA, in vec3 CA, 
               in float ID, in vec3 CD, 
               in float IS, in vec3 CS, in pointLight lightColor)
{
    C = IA * CA + (ID * CD + IS * CS) * lightColor.color;
}

void main()
{
	// REQUIRED: set this value:
	// problem: gl_position is in "clip-space"
	// problem: aPosition is in "object-space"
	//gl_Position = aPosition;
	
	// position in world-space (wrong)
	//vec4 pos_world = uModelMat * aPosition;
	//gl_Position = pos_world;
	
	// position in camera-space (also wrong)
	//vec4 pos_camera = uViewMat * uModelMat * aPosition;
	//vec4 pos_camera = uViewMat * pos_world;
	//gl_Position = pos_camera;
	
	// position in clip space (finally!)
	//vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;
	//vec4 pos_clip = uViewProjMat * pos_world;
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_camera;
	gl_Position = pos_clip;
	
	// NORMAL PIPELINE
	mat3 normalMat = transpose(inverse(mat3(modelViewMat)));
	vec3 norm_camera = normalMat * aNormal;
	//vec3 norm_camera = mat3(modelViewMat) * aNormal;
	
	// TEXCOORD PIPELINE
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	// LIGHTING PIPELINE
	pointLight pointLight;
    initPointLight(pointLight, vec3(3.0, 3.0, 0.0), vec3(1.0, 0.5, 0.0), 10.0);
    pointLight.center *= modelViewMat;
    pointLight.color *= mat3(modelViewMat);
    pointLight.intensity *= float(modelViewMat);
    
    float ambientIntensity = 0.2;
    float view_ambientIntensity = float(modelViewMat) * ambientIntensity;
    vec3 ambientColor = vec3(0.0, 0.7, 1.0);
    vec3 view_ambientColor = mat3(modelViewMat) * ambientColor;
	
	float diffCo;
	float view_diffCo = float(modelViewMat) * diffCo;
	float atten;
	float view_atten = float(modelViewMat) * atten;
    float diffInt;
    float view_diffInt = float(modelViewMat) * diffInt;
	float specCo;
	float view_specCo = float(modelViewMat) * specCo;
    float highEx = 2.0;
    float view_highEx = float(modelViewMat) * highEx;
    float specInt;
    float view_specInt = float(modelViewMat) * specInt;
    vec3 phong;
    vec3 view_phong = mat3(modelViewMat) * phong;
    
    vec3 lightVector = 
            normalize(pointLight.center.xyz - pos_camera.xyz);
            //(pointLight.center.xyz - position) * inversesqrt(lenSq((pointLight.center.xyz - position)));
	vec3 view_lightVector = mat3(modelViewMat) * lightVector;
	
	float dist = distance(pointLight.center.xyz, pos_camera.xyz);
	float view_dist = float(modelViewMat) * dist;
	
	vec3 viewVector = 
            normalize(vec3(0.0) - pos_camera.xyz);
            //(rayOrigin.xyz - position) * inversesqrt(lenSq((rayOrigin.xyz - position)));
	vec3 view_viewVector = mat3(modelViewMat) * viewVector;
	
	vec3 reflectedLightVec = reflect(-(lightVector), norm_camera);
	vec3 view_refLightVec = mat3(modelViewMat) * reflectedLightVec;
	
	// OPTIONAL: set varyings
	//vColor = vec4(1.0, 0.5, 0.0, 1.0);
	
	//DEBUGGING:
	
	//PER-VERTEX: calculate and output final color
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	//PER-FRAGMENT: pass things that FS needs to calculate final color
	//vNormal = vec4(aNormal, 0.0);
	vNormal = vec4(norm_camera, 0.0);
	
	//vTexcoord = aTexcoord;
	vTexcoord = uv_atlas;
	
	//gl_Position = uProjMat * modelViewMat * aTexcoord;
	
	//Phong Reflectance
	diffuseCoefficient(view_diffCo, vNormal.xyz, view_lightVector);
        
    attenuation(view_atten, view_dist, pointLight);
        
    diffuseIntensity(view_diffInt, view_diffCo, view_atten);
    
    specularCoefficient(view_specCo, view_viewVector, view_refLightVec);
        
    highlightExponent(view_highEx);
        
    specularIntensity(view_specInt, view_specCo, view_highEx);
        
    phongColor(view_phong, view_ambientIntensity, view_ambientColor, 
               view_diffInt, mat3(modelViewMat) * vec3(0.5, 0.5, 0.5), 
               view_specInt, mat3(modelViewMat) * vec3(1.0, 1.0, 1.0), pointLight);
               
    vColor = vec4(view_phong, 1.0);
	
}