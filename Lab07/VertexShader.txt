#version 450


//MAIN DUTY: PROCESS ATTRIBUTES
// e.g. 3D position in space
// e.g. normal
//OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;
//in vec4 aPosition;

// e.g. 2D uv: texture coordinate
// TEXTURE-SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;

// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;
uniform vec3 viewPos;

// VARYING

// PER-VERTEX: send final color
out vec4 vColor;

//PER-FRAGMENT: send stuff to the FS to calculate final color
out vec4 vNormal;

//out vec2 vTexcoord;
out vec4 vTexcoord;

struct pointLight
{
	vec4 center;
	vec3 color;
	float intensity;
};

void initPointLight(out pointLight light, in vec3 center, in vec3 color, in float intensity)
{
    light.center = vec4(center, 1.0);
    light.color = color;
    light.intensity = intensity;
}



void main()
{
	// REQUIRED: set this value:
	// problem: gl_position is in "clip-space"
	// problem: aPosition is in "object-space"
	//gl_Position = aPosition;
	
	// position in world-space (wrong)
	//vec4 pos_world = uModelMat * aPosition;
	//gl_Position = pos_world;
	
	// position in camera-space (also wrong)
	//vec4 pos_camera = uViewMat * uModelMat * aPosition;
	//vec4 pos_camera = uViewMat * pos_world;
	//gl_Position = pos_camera;
	
	// position in clip space (finally!)
	//vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;
	//vec4 pos_clip = uViewProjMat * pos_world;
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_camera;
	gl_Position = pos_clip;
	
	// NORMAL PIPELINE
	mat3 normalMat = transpose(inverse(mat3(modelViewMat)));
	vec3 norm_camera = normalMat * aNormal;
	//vec3 norm_camera = mat3(modelViewMat) * aNormal;
	
	// TEXCOORD PIPELINE
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	// LIGHTING PIPELINE
	pointLight pointLight;
    initPointLight(pointLight, vec3(3.0, 3.0, 0.0), vec3(1.0, 0.5, 0.0), 10.0);
    pointLight.center *= modelViewMat;
    pointLight.color *= mat3(modelViewMat);
    pointLight.intensity *= float(modelViewMat);
    
	
	// OPTIONAL: set varyings
	//vColor = vec4(1.0, 0.5, 0.0, 1.0);
	
	//DEBUGGING:
	
	//PER-VERTEX: calculate and output final color
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	// VIEW-SPACE PHONG REFLECTION
	/*
	vec3 color = vec3(1.0, 0.0, 0.0);
    color *= mat3(modelViewMat);
    float ambientIntensity = 0.3;
    ambientIntensity *= float(modelViewMat);
    vec3 ambient = ambientIntensity * pointLight.color;
    ambient *= mat3(modelViewMat);
    vec3 norm = normalize(norm_camera);
    vec3 lightDirection = normalize(pointLight.center.xyz - pos_camera.xyz);
    float diffCo = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = diffCo * pointLight.color;
    diffuse *= mat3(modelViewMat);
    float specularIntensity = 0.5;
    specularIntensity *= float(modelViewMat);
    vec3 viewDirection = normalize(viewPos - pos_camera.xyz);
    viewDirection *= mat3(modelViewMat);
    vec3 reflectedLightVec = reflect(-(lightDirection), norm);
    //reflectedLightVec *= mat3(modelViewMat);
    float specCo;
    specCo *= float(modelViewMat);
    specCo = max(dot(viewDirection, reflectedLightVec), 0.0);
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    vec3 specular = specularIntensity * specCo * pointLight.color;
    specular *= mat3(modelViewMat);
    vColor = vec4((ambient + diffuse + specular) * color, 1.0);
    */
    
    // OBJECT-SPACE PHONG REFLECTION
    vec3 color = vec3(1.0, 0.0, 0.0);
    float ambientIntensity = 0.3;
    vec3 ambient = ambientIntensity * pointLight.color;
    vec3 norm = normalize(norm_camera);
    vec3 lightDirection = normalize(pointLight.center.xyz - pos_camera.xyz);
    float diffCo = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = diffCo * pointLight.color;
    float specularIntensity = 0.5;
    vec3 viewDirection = normalize(viewPos - pos_camera.xyz);
    vec3 reflectedLightVec = reflect(-(lightDirection), norm);
    float specCo = max(dot(viewDirection, reflectedLightVec), 0.0);
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    specCo *= specCo;
    vec3 specular = specularIntensity * specCo * pointLight.color;
    vColor = vec4((ambient + diffuse + specular) * color, 1.0);
	
	//PER-FRAGMENT: pass things that FS needs to calculate final color
	//vNormal = vec4(aNormal, 0.0);
	vNormal = vec4(norm_camera, 0.0);
	
	
	//vTexcoord = aTexcoord;
	vTexcoord = uv_atlas;
	
	//gl_Position = uProjMat * modelViewMat * aTexcoord;
	
	
}