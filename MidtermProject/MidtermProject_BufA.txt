/*
	Copyright 2020 Demetrius J Nekos
	Copyright 2020 Nathan Boisvert

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
		http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/

/*
    Credit to Andrew Hunt for advice on keyboard controls
*/

// Keyboard constants definition
const int KEY_LEFT  = 37;
const int KEY_UP    = 38;
const int KEY_RIGHT = 39;
const int KEY_DOWN  = 40;
const int KEY_W     = 87;
const int KEY_A     = 65;
const int KEY_S     = 83;
const int KEY_D     = 68;
const int KEY_Q     = 81;
const int KEY_E     = 69;


// getKey: texel fetches input from keyboard
//    channel: the channel that the keyboard is on, iChannel1
//    key1:    first ASCII key
//    key2:    second ASCII key (for WASD)
float getKey(sampler2D channel, int key1, int key2)
{
    return texelFetch(channel, ivec2(key1, 0), 0).x + 
        texelFetch(channel, ivec2(key2, 0), 0).x;
}

//determines new movement and stores camera position in Buffer A
// Controls: 
//    WS/Up Down arrows - Z axis
//    AD/Left Right arrows - X axis
//    QE - Y axis

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //get UV and fetch last recorded position
    vec2 uv = fragCoord / iResolution.xy;
    vec4 previouscoord = texture(iChannel0,uv);
    
    //get all inputs
    float forward = getKey(iChannel1, KEY_UP, KEY_W);
    float left = getKey(iChannel1, KEY_LEFT, KEY_A);
    float back = getKey(iChannel1, KEY_DOWN, KEY_S);
    float right = getKey(iChannel1, KEY_RIGHT, KEY_D);
	float up = getKey(iChannel1, KEY_Q, KEY_Q) * 0.5;
	float down = getKey(iChannel1, KEY_E, KEY_E) * 0.5;

    //add inputs with previous position for new position
    fragColor = previouscoord + vec4(right - left, up - down, forward - back, 0.0) * 0.1;
}