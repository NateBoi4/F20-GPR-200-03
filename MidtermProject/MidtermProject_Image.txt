// Basic Rotation matrix for any axis
mat3 rotationMatrix(in vec2 angle)
{
    float sa = sin(angle.x);
    float ca = cos(angle.x);
    float sb = sin(-angle.y);
    float cb = cos(-angle.y);

    return mat3(ca, sa * sb, sa * cb,
                0.0, cb, -sb,
                -sa, ca * sb, cb * ca);
}

// Sets up and draws scene
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;
    vec2 camuv = fragCoord / iResolution.xy; // used for sampling camera channels
    
    vec3 rayOrigin = vec3(0.0, 1.0, 0.0) + texture(iChannel0,uv).xyz;
    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1.0)) * rotationMatrix(texture(iChannel1,uv).xy * 3.14159);
    
    // output that will be given a color based on what object it hits
    vec4 color;
    
    // distance from viewport to whatever the ray hits
    float dist = shortestDistanceToSurface(color, rayOrigin, rayDirection, MIN_DIST, MAX_DIST);
    
    /*if (dist > MAX_DIST - SURF_DIST) {
        // Didn't hit anything
        fragColor = vec4(0.0);
		return;
    }*/
	
    // point on object surface
    vec3 point = rayOrigin + dist * rayDirection;
    
    color = calcLighting ( vec3(2.0, 2.0, 6.0),  vec4(1.0),  10.0,  point,
                    getNormal(point),  rayOrigin, point-rayOrigin,color)
        + calcLighting ( vec3(-2.0, 2.0, 6.0),  vec4(1.0),  10.0,  point,
                    getNormal(point),  rayOrigin, point-rayOrigin,color)
        + calcLighting ( vec3(-2.0, 2.0, 0.0),  vec4(1.0),  10.0,  point,
                    getNormal(point),  rayOrigin, point-rayOrigin,color)
        + calcLighting ( vec3(-2.0, 2.0, 12.0),  vec4(1.0),  10.0,  point,
                    getNormal(point),  rayOrigin, point-rayOrigin,color)

        + calcLighting ( vec3(9.0, 2.0, 6.0),  vec4(1.0),  10.0,  point,
                    getNormal(point),  rayOrigin, point-rayOrigin,color);;;;

    
    fragColor = color;
}