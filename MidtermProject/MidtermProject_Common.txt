#define MAX_STEPS 150
#define MAX_DIST 150.0
#define SURF_DIST 0.0001
#define MIN_DIST 0.0

struct sSphere
{
    float radius;
    vec4 center;
};
    
struct sBox
{
	vec3 dimensions;
    vec4 center;
};
    
struct sColoredObj
{
    vec4 color;
    int index;
    float dist;
};
        
struct sSphereObj
{
	sColoredObj Obj;
    sSphere sphere;
};

struct sBoxObj
{
    sColoredObj Obj;
	sBox box;
};

struct sPlaneObj
{
    sColoredObj Obj;
};

// OBJintersect: Returns the intesection of two volumes
//    distA: the first volume
//    distA: the second volume
sColoredObj OBJintersect(sColoredObj distA, sColoredObj distB) 
{
    //return max(distA, distB);
    if (distA.dist > distB.dist)
        return distA;
    return distB;

}

// OBJintersect: Returns the union of two volumes
//    distA: the first volume
//    distA: the second volume
sColoredObj OBJunion(in sColoredObj distA, in sColoredObj distB) 
{
    //return min(distA, distB);
    if (distA.dist > distB.dist)
        return distB;
    return distA;

}

// OBJintersect: Returns the difference of two volumes
//    distA: the first volume
//    distA: the second volume, which will be removed
sColoredObj OBJdifference(in sColoredObj distA, in sColoredObj distB) 
{
    //return (distA.dist > -distB.dist) ? distA : distB; //WHY TF DOESNT ISNT THIS LEGAL
    if (distA.dist > -1.0 * distB.dist)
        return distA;
    distB.dist = -1.0 * distB.dist;
    return distB;
}

// createSphere: distance to a given sphere
//    center: centerpoint of sphere
//    radius: radius of sphere
//    p:      sample point
sSphereObj initSphere(vec4 center, float radius, 
                      vec4 color, int index, vec3 p)
{
    sSphereObj sphere;
    sphere.sphere.center = center;
    sphere.sphere.radius = radius;
    sphere.Obj.color = color;
    sphere.Obj.index = index;
    sphere.Obj.dist = length(p - center.xyz) - radius;
    return sphere;
}

// planeDistance: distance to the plane y = 0
//    p: sample point 
sPlaneObj initPlane(vec4 color, vec3 p)
{
	sPlaneObj plane;
    plane.Obj.color = color;
    plane.Obj.index = 0;
    plane.Obj.dist = p.y;
    return plane;
}
    
float renderScene(vec3 position, out vec4 color)
{
    sSphereObj Spheres[3];
    sBoxObj Boxes[3];
    int currentarray, currentindex;
    
    // create scene objects
    Spheres[0] = initSphere(vec4(-1.5, 0.0, 6.0, 1.0), 1.0, 
                  vec4(1.0, 0.0, 0.0, 1.0), 0, position);
    Spheres[1] = initSphere(vec4(-1.0, 0.5, 5.5, 1.0),0.5,
             vec4(1.0, 1.0, 0.0, 1.0), 1, position);
    Spheres[2] = initSphere(vec4(1.5, 0.0, 6.0, 1.0), 1.0,
    				vec4(1.0, 0.0, 1.0, 1.0),2,position);
    sPlaneObj planeDistance = initPlane(vec4(1.0),position);

    // use Logic to build the correct distance
    sColoredObj d = OBJdifference(Spheres[0].Obj, Spheres[1].Obj);
    d = OBJunion(d, Spheres[2].Obj);
    d = OBJunion(d, planeDistance.Obj);
    
    //assign color
	color = d.color;
    
    return d.dist;
}

float shortestDistanceToSurface(out vec4 color, vec3 eye, vec3 marchingDirection, float start, float end) {
    //credit to https://www.shadertoy.com/view/4tcGDr
    
    float depth = start;
    for (int i = 0; i < MAX_STEPS; i++) {
        float dist = renderScene(eye + depth * marchingDirection, color);
        if (dist < SURF_DIST) {
			return depth;
        }
        depth += dist;
        if (depth >= end) {
            return end;
        }
    }
    return end;
}


vec3 getNormal(vec3 p){
    
    vec4 color;//placeholder, not needed for this.
    
    
    float d = renderScene(p,color);
    vec2 e = vec2(0.01, 0.0);
    
    vec3 n = d - vec3(
    renderScene(p - e.xyy,color),
    renderScene(p - e.yxy,color),
    renderScene(p - e.yyx,color));
    
    return normalize(n);
}

// calcLighting: calculates Lambertian and Blinn-Phong reflectance, and returns part of the summation of the final color
//    light: the current Point Light
//    position:     point on the sphere that we are drawing
//    normal:       normal vector from point
//    rayOrigin:    input ray origin
//	  viewVector:	vector from point to camera
vec4 calcLighting (in vec3 lightpos, in vec4 lightcolor, float lightintense, in vec3 position,
                   in vec3 normal, in vec3 rayOrigin, in vec3 viewVector, in vec4 Objectcolor)
{
    //Taken from Demetri's Lab 4
    // LAMBERTIAN REFLECTANCE
    vec3 lightVector = lightpos.xyz - position; // get vector of position to the light
	float lightLength = length(lightVector); // get length of light vector
    lightVector = lightVector / lightLength; // normalizes vector
   
    float diffuseCoefficient = max(0.0, dot(lightVector, normal)); // get coefficient
   
    float intensityRatio = lightLength/lightintense; // simplifying attenuation equation by doing this once
    float attenuation = 1.0 / (1.0 + intensityRatio +
                             (intensityRatio * intensityRatio)); // get attenuation
    float Lambertian = diffuseCoefficient * attenuation; // final lambertian

    // BLINN-PHONG REFLECTANCE
   
    float specular = max(0.0,dot(normal, normalize(viewVector + lightVector))); // get base specular coefficient
    specular *= specular; // specularCoefficient^2
    specular *= specular; // specularCoefficient^4
    specular *= specular * specular * specular; // ^16
    specular *= specular * specular * specular; // ^64
    specular *= specular * specular * specular; // ^256 = a
    specular *= 4.0; // Blinn coefficient
   
    //return (Lambertian * vec4(normal * 0.5 + 0.5, 1.0) + specular) * lightcolor;
    return (Lambertian * Objectcolor + specular) * lightcolor;

}